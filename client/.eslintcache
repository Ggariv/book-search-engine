[{"C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\index.js":"1","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\App.js":"2","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\pages\\SearchBooks.js":"3","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\components\\Navbar.js":"4","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\pages\\SavedBooks.js":"5","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\utils\\localStorage.js":"6","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\components\\SignupForm.js":"7","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\components\\LoginForm.js":"8","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\utils\\auth.js":"9","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\utils\\mutations.js":"10","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\utils\\queries.js":"11"},{"size":266,"mtime":1676936808000,"results":"12","hashOfConfig":"13"},{"size":1020,"mtime":1677468847386,"results":"14","hashOfConfig":"13"},{"size":4710,"mtime":1677954539255,"results":"15","hashOfConfig":"13"},{"size":2524,"mtime":1676936808000,"results":"16","hashOfConfig":"13"},{"size":2431,"mtime":1677455624414,"results":"17","hashOfConfig":"13"},{"size":793,"mtime":1676936808000,"results":"18","hashOfConfig":"13"},{"size":3410,"mtime":1677954358513,"results":"19","hashOfConfig":"13"},{"size":2771,"mtime":1677468119161,"results":"20","hashOfConfig":"13"},{"size":1234,"mtime":1676936808000,"results":"21","hashOfConfig":"13"},{"size":1448,"mtime":1677453674263,"results":"22","hashOfConfig":"13"},{"size":366,"mtime":1677453134706,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hsv045",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\index.js",[],"C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\App.js",[],"C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\pages\\SearchBooks.js",["49","50"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/react-hooks';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchInput}`);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBook({\n        variables: { bookData: { ...bookToSave } },\n      });\n      console.log(savedBookIds);\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n      } \n    catch (err) { console.error(err); }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\components\\Navbar.js",[],"C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\pages\\SavedBooks.js",["51","52","53"],"import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(QUERY_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n  const userData = data?.me || {};\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n      }\n    try {\n      const { data } = await removeBook({\n        variables: { bookId },\n        });\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n      } \n    catch (err) { console.error(err); }\n    };\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n    }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\components\\SignupForm.js",[],"C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\utils\\auth.js",["54"],"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\utils\\mutations.js",[],"C:\\Users\\ggarc\\projects\\IntelSwift\\HOMEWORK\\React\\book-search-engine\\client\\src\\utils\\queries.js",[],{"ruleId":"55","severity":1,"message":"56","line":17,"column":22,"nodeType":"57","messageId":"58","endLine":17,"endColumn":27},{"ruleId":"55","severity":1,"message":"59","line":70,"column":15,"nodeType":"57","messageId":"58","endLine":70,"endColumn":19},{"ruleId":"55","severity":1,"message":"56","line":12,"column":24,"nodeType":"57","messageId":"58","endLine":12,"endColumn":29},{"ruleId":"55","severity":1,"message":"60","line":16,"column":9,"nodeType":"57","messageId":"58","endLine":16,"endColumn":23},{"ruleId":"55","severity":1,"message":"59","line":25,"column":15,"nodeType":"57","messageId":"58","endLine":25,"endColumn":19},{"ruleId":"61","severity":1,"message":"62","line":49,"column":1,"nodeType":"63","endLine":49,"endColumn":34},"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'userDataLength' is assigned a value but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration"]